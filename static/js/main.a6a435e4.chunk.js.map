{"version":3,"sources":["components/AppHeader/styles.js","components/AppHeader/index.js","containers/Main/styles.js","containers/Main/index.js","utils/Request.js","config/index.js","containers/Countries/styles.js","containers/Countries/index.js","api/countries.js","containers/Country/styles.js","containers/Country/index.js","utils/TextFormatter.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["header","paddingTop","backgroundColor","display","flexDirection","justifyContent","alignItems","fontSize","fontWeight","Header","Layout","AppHeader","title","style","styles","xs","xl","listContainer","listHeader","color","listItem","cursor","listItemIcon","float","Content","Main","type","justify","align","size","GlobalOutlined","bordered","dataSource","Regions","renderItem","region","to","name","Item","RightOutlined","axios","create","baseURL","headers","tableContainer","spinner","Countries","useParams","history","useHistory","useState","countries","setCountries","errorMessage","setErrorMessage","isLoading","setLoading","a","Request","get","response","data","message","useCountries","getCountriesByRegion","useEffect","length","onRow","country","onClick","push","navigateTo","columns","dataIndex","key","sorterDirections","sorter","b","population","ellipsis","render","toLocaleString","rowKey","rowContainer","rowDirection","width","fontColor","textTransform","value","paddingLeft","flagContainer","image","height","rowItem","Country","location","state","renderArray","map","shortid","generate","renderObject","Object","keys","nativeName","src","flag","alt","replace","Array","isArray","renderData","Router","exact","path","component","App","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a6a435e4.chunk.js","sourcesContent":["export default {\n  header: {\n    paddingTop: 25,\n    backgroundColor: '#FFFFFF',\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontSize: 22,\n    fontWeight: 'bolder',\n  }\n}","import React from 'react';\nimport styles from './styles';\nimport { Layout, Row, Col } from 'antd';\nconst { Header } = Layout;\n\n\nexport const AppHeader = ({ title }) => {\n  return (\n    <Header style={styles.header}>\n      <Row>\n        <Col xs={24} xl={24}>{title ? title : `Countries - App`}</Col>\n      </Row>\n    </Header>\n  )\n};","export default {\n  listContainer: {\n    backgroundColor: '#FFFFFF',\n  },\n  listHeader: {\n    fontSize: 20,\n    color: '#000000',\n    fontWeight: 'bolder',\n  },\n  listItem: {\n    cursor: 'pointer',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  listItemIcon: {\n    float: 'right',\n  }\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Layout, Row, Col, List } from 'antd';\nimport { GlobalOutlined, RightOutlined } from '@ant-design/icons';\nimport Regions from 'api/regions.json';\nimport { AppHeader } from 'components/AppHeader';\nimport styles from './styles';\nconst { Content } = Layout;\n\nconst Main = () => {\n\n  return (\n    <Layout>\n      <AppHeader />\n      <Content>\n        <Row type=\"flex\" justify=\"center\" align=\"top\" style={styles.listContainer}>\n          <Col xs={22} xl={8}>\n            <List\n              size=\"large\"\n              header={<div style={styles.listHeader}> <GlobalOutlined /> Regions</div>}\n              bordered\n              dataSource={Regions}\n              renderItem={region => (\n                <Link to={`${region.name}/countries`} >\n                  <List.Item\n                    style={styles.listItem}\n                  >\n                    {region.name}\n                    <RightOutlined style={styles.listItemIcon} />\n                  </List.Item>\n                </Link>\n              )\n              }\n            />\n          </Col>\n        </Row>\n      </Content>\n    </Layout >\n  )\n}\n\nexport default Main;","import { API_URL } from 'config';\nimport axios from 'axios';\n\nexport default axios.create({\n  baseURL: `${API_URL}`,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  }\n});","export const API_URL = 'https://restcountries.eu/rest/v2/';","export default {\n  tableContainer: {\n    backgroundColor: '#FFFFFF',\n  },\n  spinner: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  }\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { Layout, Row, Col, Table, Alert, Spin } from 'antd';\nimport useCountries from 'api/countries';\nimport { AppHeader } from 'components/AppHeader';\nimport styles from './styles';\nconst { Content } = Layout;\n\nconst Countries = () => {\n  let { region } = useParams();\n  let history = useHistory();\n  const [getCountriesByRegion, countries, errorMessage, isLoading] = useCountries();\n\n  useEffect(() => {\n    getCountriesByRegion(region);\n  }, []);\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      sorterDirections: ['ascend' | 'descend'],\n      sorter: (a, b) => a.name.length - b.name.length,\n    },\n    {\n      title: 'Population',\n      dataIndex: 'population',\n      key: 'population',\n      sorter: (a, b) => a.population - b.population,\n      sorterDirections: ['ascend' | 'descend'],\n      ellipsis: false,\n      render: (population) => population.toLocaleString(),\n    },\n  ];\n\n  const navigateTo = (country) => {\n    history.push(`/country/${country.name}`, { country })\n  }\n\n  return (\n    <Layout>\n      <AppHeader title={region} />\n      <Content>\n        <Row type=\"flex\" justify=\"center\" align=\"top\" style={styles.tableContainer}>\n          <Col xs={22} xl={12}>\n            {isLoading && <Spin style={styles.spinner} size=\"large\" />}\n            {errorMessage.length ? (\n              <Alert message={errorMessage} type=\"error\" />\n            ) : (\n                <Table\n                  onRow={(country) => {\n                    return {\n                      onClick: () => navigateTo(country)\n                    }\n                  }}\n                  columns={columns}\n                  dataSource={countries}\n                  rowKey=\"name\"\n                />\n              )}\n          </Col>\n        </Row>\n      </Content>\n    </Layout>\n  )\n}\n\nexport default Countries;","import { useState } from 'react';\nimport Request from 'utils/Request';\n\nexport default () => {\n  const [countries, setCountries] = useState([]);\n  const [errorMessage, setErrorMessage] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n\n  const getCountriesByRegion = async (region) => {\n    setLoading(true);\n    try {\n      const response = await Request.get(`/region/${region}`);\n      setCountries(response.data);\n      setLoading(false);\n    } catch (error) {\n      setErrorMessage(error.message);\n      setLoading(false);\n    }\n  };\n\n  return [getCountriesByRegion, countries, errorMessage, isLoading];\n};","export default {\n  rowContainer: {\n    display: 'flex',\n    rowDirection: 'row',\n  },\n  name: {\n    width: '30%',\n    fontWeight: 'bolder',\n    fontColor: '#000000',\n    textTransform: 'capitalize',\n    display: 'flex',\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start'\n  },\n  value: {\n    paddingLeft: 35,\n    width: '30%',\n    fontColor: '#000000',\n    display: 'flex',\n    alignItems: 'flex-start',\n    justifyContent: 'flex-start',\n  },\n  flagContainer: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#FFFFFF',\n    paddingTop: 30,\n  },\n  image: {\n    width: 350,\n    height: 250,\n  },\n  listContainer: {\n    fontSize: 16,\n    paddingTop: 25,\n    backgroundColor: '#FFFFFF',\n  },\n  rowItem: {\n    display: 'flex',\n  }\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Layout, Row, Col } from 'antd';\nimport { AppHeader } from 'components/AppHeader';\nimport styles from './styles';\nimport { TextFormatter } from 'utils/TextFormatter';\nimport shortid from 'shortid';\nconst { Content } = Layout;\n\nconst Country = () => {\n  let history = useHistory();\n  const { country } = history.location.state;\n\n  const renderData = (country, key) => {\n    const value = country[key];\n    if (typeof value === 'string' || typeof value === 'number') {\n      return value;\n    }\n    if (Array.isArray(value)) {\n      return renderArray(value);\n    }\n    if (value instanceof Object && !Array.isArray(value)) {\n      return renderObject(value);\n    }\n  }\n\n  const renderArray = (data) => {\n    return data.map(value => {\n      return <div style={styles.rowItem}\n        key={shortid.generate()}>\n        {typeof value !== 'object' ? value : value.name}\n      </div>\n    });\n  }\n\n  const renderObject = (data) => {\n    return Object.keys(data).map(value =>\n      <Col\n        xs={12} xl={24}\n        style={styles.rowItem}\n        key={shortid.generate()}\n      >\n        {value}\n      </Col>);\n  }\n\n  return (\n    <Layout>\n      <AppHeader title={`${country.name} / ${country.nativeName}`} />\n      <Content>\n        <div style={styles.flagContainer}>\n          <img src={country.flag} alt=\"country-flag\" style={styles.image} />\n        </div>\n        {Object.keys(country).map((key) => (\n          <Row\n            type=\"flex\"\n            justify=\"center\"\n            align=\"top\"\n            style={styles.listContainer}\n            key={shortid.generate()}\n          >\n            <Col xs={4} xl={3}>\n              <div style={styles.name}>{TextFormatter(key)}</div>\n            </Col>\n            <Col xs={14} xl={3}>\n              <div style={styles.value}>{renderData(country, key)}</div>\n            </Col>\n          </Row>\n        ))}\n      </Content>\n    </Layout>\n  )\n}\n\nexport default Country;","export const TextFormatter = (string) => {\n  return string.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n}","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Main from 'containers/Main';\nimport Countries from 'containers/Countries';\nimport Country from 'containers/Country';\n\nconst Router = () => {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Main} />\n        <Route path=\"/:region/countries\" component={Countries} />\n        <Route path=\"/country/:countryName\" component={Country} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default Router;\n","import React from 'react';\nimport Routes from './routes';\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return <Routes />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}